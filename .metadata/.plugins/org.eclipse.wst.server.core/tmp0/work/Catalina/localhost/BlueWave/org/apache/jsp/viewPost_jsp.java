/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.90
 * Generated at: 2024-08-01 05:20:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.model.CommentDAO;
import com.model.CommentDTO;
import com.model.UserDTO;
import java.sql.Timestamp;
import com.model.PostDTO;
import com.model.PostDAO;
import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class viewPost_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(8);
    _jspx_imports_classes.add("com.model.PostDAO");
    _jspx_imports_classes.add("java.sql.Timestamp");
    _jspx_imports_classes.add("com.model.CommentDAO");
    _jspx_imports_classes.add("com.model.UserDTO");
    _jspx_imports_classes.add("com.model.CommentDTO");
    _jspx_imports_classes.add("com.model.PostDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>viewPost파일</title>\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"CSS/base.css\">\r\n");
      out.write("    <style>\r\n");
      out.write("        /* 전체 페이지 스타일 */\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: Arial, sans-serif;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            box-sizing: border-box;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write(" \r\n");
      out.write("        /* 컨테이너 스타일 */\r\n");
      out.write("        .container {\r\n");
      out.write("            width: 800px;\r\n");
      out.write("            margin: 100px auto; /* 중앙 정렬 및 위아래 여백 */\r\n");
      out.write("            padding: 20px; /* 내부 여백 설정 */\r\n");
      out.write("            padding-bottom: 10px;\r\n");
      out.write("            border: none;\r\n");
      out.write("            background-color: #fafafa;\r\n");
      out.write("            position: relative; /* 위치 설정을 위해 relative로 설정 */\r\n");
      out.write("            margin-top: 10px;\r\n");
      out.write("            height: 1200%\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("		.communityName {\r\n");
      out.write("		    display: block;\r\n");
      out.write("		    font-size: 2em;\r\n");
      out.write("		    margin-block-start: 0.67em;\r\n");
      out.write("		    margin-block-end: 0.67em;\r\n");
      out.write("		    margin-inline-start: 0px;\r\n");
      out.write("		    margin-inline-end: 0px;\r\n");
      out.write("		    unicode-bidi: isolate;\r\n");
      out.write("		    text-align: center; /* 텍스트 중앙 정렬 */\r\n");
      out.write("		    width: 100%; /* 전체 너비를 차지하도록 설정 */\r\n");
      out.write("		    font-style: italic; /* 이탤릭체 적용 */\r\n");
      out.write("		    margin-bottom: 100px;\r\n");
      out.write("		    font-weight: bold; /* 볼드체 적용 */\r\n");
      out.write("		}\r\n");
      out.write("		.communityName:hover {\r\n");
      out.write("		    cursor: pointer; /* 손가락 모양 커서로 변경 */\r\n");
      out.write("		}\r\n");
      out.write("        \r\n");
      out.write("        /* h1 태그 스타일 */\r\n");
      out.write("        .container h1 {\r\n");
      out.write("            font-size: 24px;\r\n");
      out.write("            margin: 0 0 10px 0; /* 하단 여백 조정 */\r\n");
      out.write("            padding: 0; /* 패딩 초기화 */\r\n");
      out.write("            text-align: left; /* 텍스트 왼쪽 정렬 */\r\n");
      out.write("            position: relative; /* 기본 위치 설정 */\r\n");
      out.write("            left: 0; /* 컨테이너의 왼쪽에서 시작하도록 설정 */\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .content {\r\n");
      out.write("            min-height: 350px; /* 최소 높이 설정 */\r\n");
      out.write("            padding-bottom: 50px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        /* 댓글 작성 폼 스타일 */\r\n");
      out.write("        .comment-form {\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("            display: flex; /* 플렉스 박스를 사용하여 가로 배치 */\r\n");
      out.write("            gap: 10px; /* 입력 필드와 버튼 사이의 간격 */\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .comment-form textarea {\r\n");
      out.write("            flex: 1; /* 입력 필드가 가능한 한 넓게 확장되도록 설정 */\r\n");
      out.write("            height: 80px;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("            border-radius: 4px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .comment-form button {\r\n");
      out.write("            padding: 10px 20px;\r\n");
      out.write("            border: none;\r\n");
      out.write("            background-color: #007bff;\r\n");
      out.write("            color: white;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            border-radius: 4px;\r\n");
      out.write("            width: 10%;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .comment-form button:hover {\r\n");
      out.write("            background-color: #0056b3;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        /* 댓글 목록 스타일 */\r\n");
      out.write("        .commentRow {\r\n");
      out.write("            margin: 0px;\r\n");
      out.write("            background-color: #eeeeee;\r\n");
      out.write("            padding: 10px 5px 10px 15px;\r\n");
      out.write("            border-radius: 20px;\r\n");
      out.write("            margin-bottom: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .commentUser {\r\n");
      out.write("            margin-bottom: 0px;\r\n");
      out.write("            margin-top: 5px;\r\n");
      out.write("            font-size: 15px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .commentContent{\r\n");
      out.write("            margin-bottom: 0px;\r\n");
      out.write("            margin-top: 5px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .commentDate {\r\n");
      out.write("            margin-bottom: 0px;\r\n");
      out.write("            margin-top: 5px;\r\n");
      out.write("            font-size: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .like-button-form {\r\n");
      out.write("            text-align: center; /* 버튼을 중앙 정렬 */\r\n");
      out.write("            margin-top: 20px; /* 버튼 위 여백 조정 */\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .like-button-form button {\r\n");
      out.write("            background-color: #007bff;\r\n");
      out.write("            border: none;\r\n");
      out.write("            color: white;\r\n");
      out.write("            padding: 10px 20px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            display: inline-block;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            margin: 10px 0;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            border-radius: 100%;\r\n");
      out.write("            width: 90px;\r\n");
      out.write("            height: 90px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        button:hover {\r\n");
      out.write("            background-color: #0056b3;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .like-button {\r\n");
      out.write("            background-color: #f0f0f0;\r\n");
      out.write("            border: none;\r\n");
      out.write("            color: #333;\r\n");
      out.write("            padding: 10px 20px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            display: inline-block;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            margin: 10px 0;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            border-radius: 20px;\r\n");
      out.write("            transition: all 0.3s ease;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .like-button:hover {\r\n");
      out.write("            background-color: #ff6b6b;\r\n");
      out.write("            color: white;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .like-button .like-count {\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            margin-left: 5px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        /* 댓글 입력 스타일 수정 */\r\n");
      out.write("        .comment-input {\r\n");
      out.write("            width: 97%;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("            border-radius: 4px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            resize: vertical;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* 포스트 헤더 스타일 */\r\n");
      out.write("        .posthead {\r\n");
      out.write("            display: flex; /* 플렉스 박스를 사용하여 가로 배치 */\r\n");
      out.write("            justify-content: space-between; /* 양쪽 끝으로 배치 */\r\n");
      out.write("            margin-bottom: 10px; /* 하단 여백 설정 */\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    ");

        // post 관련 객체 생성
        PostDAO dao = new PostDAO();
        PostDTO dto = new PostDTO();
        int post_idx = Integer.parseInt(request.getParameter("post_idx"));
        dto = dao.postSearch(post_idx);
        
        // 현재 유저의 정보 가져오기 - 세션
        UserDTO user = (UserDTO) session.getAttribute("user");
        
        String user_id = dto.getUserId(); // 작성자 ID
        String post_title = dto.getPostTitle(); // 타이틀
        String post_content = dto.getPostContents(); // 내용
        String post_file = dto.getPostFile(); // 첨부파일
        Timestamp created_at = dto.getCreatedAt();
        Timestamp updated_at = dto.getUpdatedAt();
        int post_views = dto.getPostViews();
    
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    <header>\r\n");
      out.write("        <nav>\r\n");
      out.write("            <div class=\"logo\">\r\n");
      out.write("                <a href=\"main.jsp\"> <img src=\"image/Blue Wave.png\" alt=\"Blue Wave Logo\"> </a>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"right-menu\">\r\n");
      out.write("                ");

                    if (user != null) {
                
      out.write("\r\n");
      out.write("                    <a class=\"logNavBtn\" href=\"LogoutServlet\">로그아웃</a>\r\n");
      out.write("                ");

                    } else {
                
      out.write("\r\n");
      out.write("                    <a class=\"logNavBtn\" href=\"login.jsp\">로그인</a>\r\n");
      out.write("                ");

                    }
                
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("        </nav>\r\n");
      out.write("    </header>\r\n");
      out.write("    \r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("    <p class=\"communityName\" onclick=\"redirectToCommunity()\">VOICE of YOUTH</p>\r\n");
      out.write("        <div class=\"title\">\r\n");
      out.write("            <h1>");
      out.print( post_title );
      out.write("</h1>\r\n");
      out.write("            <div class=\"posthead\">\r\n");
      out.write("                <span>작성자 :");
      out.print( user_id );
      out.write("</span>\r\n");
      out.write("                <span class=\"created_at\">");
      out.print( created_at );
      out.write("</span>\r\n");
      out.write("            </div>\r\n");
      out.write("            <hr>\r\n");
      out.write("        </div>\r\n");
      out.write("        \r\n");
      out.write("        <main>\r\n");
      out.write("            <p class=\"content\">");
      out.print( post_content );
      out.write("</p>\r\n");
      out.write("            ");
 if (post_file != null && !post_file.isEmpty()) { 
      out.write("\r\n");
      out.write("                <p>첨부 파일 : ");
      out.print( post_file );
      out.write("</p>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("            \r\n");
      out.write("            ");

                int post_likes = dto.getPostLikes();
            
      out.write("\r\n");
      out.write("            \r\n");
      out.write("            <!-- 좋아요 버튼 폼 -->\r\n");
      out.write("            <form action=\"PostLikeService\" method=\"post\" class=\"like-button-form\">\r\n");
      out.write("                <input type=\"hidden\" value=\"");
      out.print( post_idx );
      out.write("\" name=\"post_idx\">\r\n");
      out.write("                <button type=\"submit\"><img src=\"image/likehand.png\" alt=\"like\" style=\"width: 50%; height: auto;\"><br><span style=\"position: relative; top: 5px;\">");
      out.print( post_likes );
      out.write("</span></button> \r\n");
      out.write("            </form>\r\n");
      out.write("            \r\n");
      out.write("            <!-- 댓글 작성 폼 추가 -->\r\n");
      out.write("            <h2>댓글</h2>\r\n");
      out.write("            <form action=\"CommentServlet\" method=\"post\" class=\"comment-form\" id=\"commentForm\">\r\n");
      out.write("                ");

                    if (user == null || user.getUserId() == null) {
                        response.sendRedirect("retry.jsp");
                        return; // 리다이렉션 후 스크립트 실행 방지
                    } else {
                        String userid = user.getUserId();
                
      out.write("\r\n");
      out.write("                <input type=\"hidden\" value=\"");
      out.print( post_idx );
      out.write("\" name=\"post_idx\">\r\n");
      out.write("                <input type=\"text\" name=\"comment_content\" placeholder=\"댓글 내용을 입력하세요\" required class=\"comment-input\">\r\n");
      out.write("                <button type=\"submit\" class=\"addCommentBtn\">작성</button>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            </form>\r\n");
      out.write("            <hr>\r\n");
      out.write("            \r\n");
      out.write("            <!-- 댓글 목록 출력 -->\r\n");
      out.write("            ");

                CommentDAO commentDao = new CommentDAO();
                List<CommentDTO> commentList = commentDao.getCommentsByPostId(post_idx);
                if (commentList != null && !commentList.isEmpty()) {
            
      out.write("\r\n");
      out.write("                ");

                    for (CommentDTO comment : commentList) {
                
      out.write("\r\n");
      out.write("                <div class=\"commentRow\">\r\n");
      out.write("                    <p class=\"commentUser\">");
      out.print( comment.getUserId() );
      out.write("</p>\r\n");
      out.write("                    <p class=\"commentContent\">");
      out.print( comment.getCommentContent() );
      out.write("</p>\r\n");
      out.write("                    <p class=\"commentDate\">");
      out.print( comment.getCreatedAt() );
      out.write("</p>\r\n");
      out.write("                </div>\r\n");
      out.write("                ");

                    }
                
      out.write("\r\n");
      out.write("            ");

                } else {
            
      out.write("\r\n");
      out.write("                <p>댓글이 없습니다.</p>\r\n");
      out.write("            ");

                }
            
      out.write("\r\n");
      out.write("        </main>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    <!-- 웹페이지 최하단 -->\r\n");
      out.write("    <footer>\r\n");
      out.write("        <div class=\"footer-container\">\r\n");
      out.write("            <img src=\"image/Blue Wave.png\" alt=\"Logo\" class=\"footer-logo\">\r\n");
      out.write("            <nav class=\"footer-nav\">\r\n");
      out.write("                <a href=\"#\">팀 소개</a>\r\n");
      out.write("                <a href=\"#\">이용약관</a>\r\n");
      out.write("                <a href=\"#\">개인정보처리방침</a>\r\n");
      out.write("                <a href=\"#\">시스템 문의</a>\r\n");
      out.write("            </nav>\r\n");
      out.write("        </div>\r\n");
      out.write("    </footer>\r\n");
      out.write("    \r\n");
      out.write("    <script>\r\n");
      out.write("        document.querySelector('.comment-input').addEventListener('keypress', function(e) {\r\n");
      out.write("            if (e.key === 'Enter') {\r\n");
      out.write("                e.preventDefault();\r\n");
      out.write("                document.getElementById('commentForm').submit();\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    	function redirectToCommunity() {\r\n");
      out.write("    	    window.location.href = \"community.jsp\";\r\n");
      out.write("    	} \r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
