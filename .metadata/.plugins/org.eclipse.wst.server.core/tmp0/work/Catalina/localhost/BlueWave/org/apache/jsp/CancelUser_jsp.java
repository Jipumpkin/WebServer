/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.90
 * Generated at: 2024-07-30 11:23:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.model.UserDTO;

public final class CancelUser_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("com.model.UserDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\" />\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n");
      out.write("<title>회원탈퇴</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"CSS/LoginSucST.css\" />\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("	.confirmEmail {\r\n");
      out.write("		border: none;\r\n");
      out.write("		padding: 10px;\r\n");
      out.write("		border-radius: 10px;\r\n");
      out.write("		background-color: #eaeaea;	\r\n");
      out.write("		margin-bottom: 20px;\r\n");
      out.write("		width: 70%;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	.DeleteBtn {\r\n");
      out.write("		border: none;\r\n");
      out.write("		padding: 15px 30px;\r\n");
      out.write("		border-radius: 10px;\r\n");
      out.write("		margin: 40px 20px 0px 20px;\r\n");
      out.write("		background-color: #6f6f6f;\r\n");
      out.write("		cursor: pointer;\r\n");
      out.write("		transition: background-color 0.3s ease, color 0.3s ease;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	.DeleteBtn span {\r\n");
      out.write("		font-size: 20px;\r\n");
      out.write("		color: #ffffff;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	.DeleteBtn:hover {\r\n");
      out.write("		background-color: #b90000; /* 호버 시 배경색을 빨간색으로 변경 */\r\n");
      out.write("		color: #ffffff; /* 호버 시 텍스트 색상을 흰색으로 유지 */\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	.error {\r\n");
      out.write("		color: red;\r\n");
      out.write("		font-size: 14px;\r\n");
      out.write("		margin-top: 10px;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

UserDTO user = (UserDTO) session.getAttribute("user");
String email = user.getUserEmail(); // 이메일 값을 JSP 변수로 가져옴
String userId = user.getUserId(); // 사용자 ID 값을 JSP 변수로 가져옴

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"login-container\">\r\n");
      out.write("	<!-- 배경 텍스트 -->\r\n");
      out.write("	<div class=\"background-text\">\r\n");
      out.write("		<span>BLUE</span> <span>WAVE</span>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<div class=\"login-form\">\r\n");
      out.write("		<!-- 로고 -->\r\n");
      out.write("		<img src=\"image/Blue Wave.png\" alt=\"Logo\" />\r\n");
      out.write("\r\n");
      out.write("		<!-- 텍스트 필드 -->\r\n");
      out.write("		<h2>회원탈퇴를 선택하셨습니다.</h2>\r\n");
      out.write("		<input type=\"email\" class=\"confirmEmail\" id=\"confirmEmail\" placeholder=\"이메일 입력\">\r\n");
      out.write("		<h3>이메일을 입력 후, 탈퇴버튼을 누르세요.</h3>\r\n");
      out.write("		<h4>이메일이 일치하면 탈퇴가 진행됩니다.</h4>\r\n");
      out.write("		<button class=\"DeleteBtn\" id=\"deleteBtn\"><span>회원탈퇴</span></button>\r\n");
      out.write("		<p id=\"errorMessage\" class=\"error\"></p> <!-- 오류 메시지 표시 -->\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- 웹페이지 최하단 -->\r\n");
      out.write("<footer>\r\n");
      out.write("	<div class=\"footer-container\">\r\n");
      out.write("		<img src=\"image/Blue Wave.png\" alt=\"Logo\" class=\"footer-logo\" />\r\n");
      out.write("		<nav class=\"footer-nav\">\r\n");
      out.write("			<a href=\"#\">팀 소개</a> <a href=\"#\">이용약관</a> <a href=\"#\">개인정보처리방침</a> <a href=\"#\">시스템 문의</a>\r\n");
      out.write("		</nav>\r\n");
      out.write("	</div>\r\n");
      out.write("</footer>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("document.addEventListener(\"DOMContentLoaded\", function() {\r\n");
      out.write("    const userEmail = \"");
      out.print( email );
      out.write("\";\r\n");
      out.write("    const userId = \"");
      out.print( userId );
      out.write("\";\r\n");
      out.write("    const confirmEmailInput = document.getElementById(\"confirmEmail\");\r\n");
      out.write("    const deleteBtn = document.getElementById(\"deleteBtn\");\r\n");
      out.write("    const errorMessage = document.getElementById(\"errorMessage\");\r\n");
      out.write("\r\n");
      out.write("    deleteBtn.addEventListener(\"click\", function() {\r\n");
      out.write("        if (confirmEmailInput.value === userEmail) {\r\n");
      out.write("            // 이메일이 일치하면 서버로 폼 전송\r\n");
      out.write("            const form = document.createElement(\"form\");\r\n");
      out.write("            form.method = \"POST\";\r\n");
      out.write("            form.action = \"UserDelete\"; // 서블릿 URL로 이동\r\n");
      out.write("\r\n");
      out.write("            // 이메일과 사용자 ID를 숨겨진 필드로 추가\r\n");
      out.write("            const emailInput = document.createElement(\"input\");\r\n");
      out.write("            emailInput.type = \"hidden\";\r\n");
      out.write("            emailInput.name = \"email\";\r\n");
      out.write("            emailInput.value = userEmail;\r\n");
      out.write("            form.appendChild(emailInput);\r\n");
      out.write("            \r\n");
      out.write("            const userIdInput = document.createElement(\"input\");\r\n");
      out.write("            userIdInput.type = \"hidden\";\r\n");
      out.write("            userIdInput.name = \"userId\";\r\n");
      out.write("            userIdInput.value = userId;\r\n");
      out.write("            form.appendChild(userIdInput);\r\n");
      out.write("            \r\n");
      out.write("            document.body.appendChild(form);\r\n");
      out.write("            form.submit(); // 제출\r\n");
      out.write("        } else {\r\n");
      out.write("            errorMessage.textContent = \"입력하신 이메일이 등록된 이메일과 일치하지 않습니다.\";\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
