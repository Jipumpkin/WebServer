/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.90
 * Generated at: 2024-07-30 12:33:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.model.UserDTO;

public final class loginSuccess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("com.model.UserDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\" />\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n");
      out.write("<title>로그인</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"CSS/LoginSucST.css\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

UserDTO user = (UserDTO) session.getAttribute("user");
String name = user.getUserName();

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 로그인 섹션 전체를 감싸는 컨테이너 -->\r\n");
      out.write("<div class=\"login-container\">\r\n");
      out.write("    <!-- 배경 텍스트 -->\r\n");
      out.write("    <div class=\"background-text\">\r\n");
      out.write("        <span>BLUE</span> <span>WAVE</span>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <!-- 로그인 성공 폼 -->\r\n");
      out.write("    <div class=\"login-form\">\r\n");
      out.write("        <!-- 로고 -->\r\n");
      out.write("        <img src=\"image/Blue Wave.png\" alt=\"Logo\" />\r\n");
      out.write("\r\n");
      out.write("        <!-- 텍스트 필드 -->\r\n");
      out.write("        <h2>\r\n");
      out.write("            <span> </span>");
      out.print(name);
      out.write("님 안녕하세요.<br /> <span>블루웨이브</span>에 오신 것을\r\n");
      out.write("            환영합니다.\r\n");
      out.write("        </h2>\r\n");
      out.write("\r\n");
      out.write("        <!-- 메인페이지 이동 버튼 -->\r\n");
      out.write("		<button class=\"login-button\" id=\"mainPageButton\">\r\n");
      out.write("		    메인페이지로 이동\r\n");
      out.write("		</button>\r\n");
      out.write("\r\n");
      out.write("        <!-- 리다이렉트 알림 문구 -->\r\n");
      out.write("        <p id=\"redirectMessage\" class=\"redirect-message\">5초 후 리다이렉트됩니다.</p>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- 웹페이지 최하단 -->\r\n");
      out.write("<footer>\r\n");
      out.write("    <div class=\"footer-container\">\r\n");
      out.write("        <img src=\"image/Blue Wave.png\" alt=\"Logo\" class=\"footer-logo\" />\r\n");
      out.write("        <nav class=\"footer-nav\">\r\n");
      out.write("            <a href=\"#\">팀 소개</a> <a href=\"#\">이용약관</a> <a href=\"#\">개인정보처리방침</a> <a\r\n");
      out.write("                href=\"#\">시스템 문의</a>\r\n");
      out.write("        </nav>\r\n");
      out.write("    </div>\r\n");
      out.write("</footer>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("function redirectToMain() {\r\n");
      out.write("    // 메인 페이지로 이동\r\n");
      out.write("    window.location.href = \"main.jsp\";\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("document.addEventListener(\"DOMContentLoaded\", function() {\r\n");
      out.write("    let countdown = 4;\r\n");
      out.write("    const redirectMessage = document.getElementById(\"redirectMessage\");\r\n");
      out.write("    const mainPageButton = document.getElementById(\"mainPageButton\");\r\n");
      out.write("\r\n");
      out.write("    // 버튼에 이벤트 리스너 추가\r\n");
      out.write("    mainPageButton.addEventListener(\"click\", redirectToMain);\r\n");
      out.write("\r\n");
      out.write("    function updateCountdown() {\r\n");
      out.write("        if (countdown > 0) {\r\n");
      out.write("            redirectMessage.innerHTML = countdown + \"초 후 리다이렉트됩니다.\";\r\n");
      out.write("            countdown--;\r\n");
      out.write("        } else {\r\n");
      out.write("            redirectMessage.innerHTML = \"리다이렉트 중...\";\r\n");
      out.write("            clearInterval(countdownInterval);\r\n");
      out.write("            setTimeout(redirectToMain, 1000);\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    const countdownInterval = setInterval(updateCountdown, 1000);\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
